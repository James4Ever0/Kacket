{
    "summary": "This code initializes a class \"InitProcEnv\" extending \"ProcEnv\", defining functions with their corresponding arity in the map. It also defines a class implementing `RuleApplier` for Kacket analysis, applying rules to procedures and overriding the `applyRule` function.",
    "details": [
        {
            "comment": "The code defines a class \"InitProcEnv\" which extends the \"ProcEnv\" class. It initializes a private HashMap named \"map\" that stores primitive procedural functions with their corresponding function rules. The class also includes an initialization method to add primitive process rules using a predefined list of key-value pairs representing different mathematical and list operations as keys and their corresponding arity definitions as values.",
            "location": "\"/media/root/Toshiba XG3/works/Kacket/docs/src/src/main/kotlin/com/github/std/kacket/analysis/InitProcEnv.kt\":0-34",
            "content": "package com.github.std.kacket.analysis\nclass InitProcEnv : ProcEnv {\n    private val map = HashMap<String, (Int) -> Unit>()\n    init {\n        addPrimitiveProcsRules()\n    }\n    private fun addPrimitiveProcsRules() {\n        map[\"+\"] = arityAny()\n        map[\"-\"] = arityAny()\n        map[\"*\"] = arityAny()\n        map[\"/\"] = arityAny()\n        map[\"=\"] = arityGreaterEqual(1)\n        map[\">\"] = arityGreaterEqual(1)\n        map[\">=\"] = arityGreaterEqual(1)\n        map[\"<\"] = arityGreaterEqual(1)\n        map[\"<=\"] = arityGreaterEqual(1)\n        map[\"null?\"] = arityEqual(1)\n        map[\"eq?\"] = arityEqual(2)\n        map[\"eqv?\"] = arityEqual(2)\n        map[\"equal?\"] = arityEqual(2)\n        map[\"car\"] = arityEqual(1)\n        map[\"cdr\"] = arityEqual(1)\n        map[\"cadr\"] = arityEqual(1)\n        map[\"cddr\"] = arityEqual(1)\n        map[\"caddr\"] = arityEqual(1)\n        map[\"cdddr\"] = arityEqual(1)\n        map[\"cadddr\"] = arityEqual(1)\n        map[\"cons\"] = arityEqual(2)\n        map[\"append\"] = arityAny()\n        map[\"list\"] = arityAny()"
        },
        {
            "comment": "This code initializes a map with various functions and their corresponding arities. It defines the function names as keys in the map, associating each with its required number of arguments (arity). The arity definitions range from 1 to any number of arguments, or specific cases like \"arityAny()\" for any number of arguments.",
            "location": "\"/media/root/Toshiba XG3/works/Kacket/docs/src/src/main/kotlin/com/github/std/kacket/analysis/InitProcEnv.kt\":35-66",
            "content": "        map[\"length\"] = arityGreaterEqual(1)\n        map[\"list-ref\"] = arityEqual(2)\n        map[\"reverse\"] = arityEqual(1)\n        map[\"map\"] = arityGreaterEqual(2)\n        map[\"make-vector\"] = arityGreaterEqual(1)\n        map[\"vector-set!\"] = arityEqual(3)\n        map[\"vector-ref\"] = arityEqual(2)\n        map[\"vector\"] = arityAny()\n        map[\"vector-length\"] = arityEqual(1)\n        map[\"set!\"] = arityEqual(2)\n        map[\"and\"] = arityAny()\n        map[\"or\"] = arityAny()\n        map[\"not\"] = arityEqual(1)\n        map[\"number?\"] = arityEqual(1)\n        map[\"symbol?\"] = arityEqual(1)\n        map[\"list?\"] = arityEqual(1)\n        map[\"boolean?\"] = arityEqual(1)\n        map[\"integer?\"] = arityEqual(1)\n        map[\"zero?\"] = arityEqual(1)\n        map[\"vector?\"] = arityEqual(1)\n        map[\"pair?\"]  = arityEqual(1)\n        map[\"write\"] = arityGreaterEqual(1) // TODO: <=2 && >=1\n        map[\"newline\"] = arityAny() // TODO: <=1 && >=0\n    }\n    override fun addRule(id: String, rule: (Int) -> Unit) {\n        map[id] = rule"
        },
        {
            "comment": "This code defines a class implementing the `RuleApplier` interface, which applies rules to procedures in Kacket analysis. It overrides the `applyRule` function, retrieves the rule for the given procedure ID from the map, and invokes it with the provided actual value.",
            "location": "\"/media/root/Toshiba XG3/works/Kacket/docs/src/src/main/kotlin/com/github/std/kacket/analysis/InitProcEnv.kt\":67-74",
            "content": "    }\n    override fun applyRule(procId: String, actual: Int) {\n        val rule = map[procId] ?: throw AnalysisError(\"Can't find procedure $procId\")\n        rule.invoke(actual)\n    }\n}"
        }
    ]
}